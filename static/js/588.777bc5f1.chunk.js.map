{"version":3,"file":"static/js/588.777bc5f1.chunk.js","mappings":"0JAqBA,GAVYA,EAAAA,EAAAA,IAAO,MAAPA,CACVC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,sICyDF,EApEqB,WAAO,IAAD,IACjBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAUjB,IARAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAaR,GAASS,KAAKL,EAG5B,CAFC,MAAOM,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACV,KAECG,EACH,OAAO,KAGT,IACEU,EAQEV,EARFU,MACAC,EAOEX,EAPFW,QACAC,EAMEZ,EANFY,OACAC,EAKEb,EALFa,YACAC,EAIEd,EAJFc,aACAC,EAGEf,EAHFe,SACAC,EAEEhB,EAFFgB,aACAC,EACEjB,EADFiB,QAGFT,QAAQC,IAAIT,GACZ,IAAMkB,EAAY,oBAAGhB,EAASiB,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,OACE,iCACE,UAACC,EAAA,EAAD,CAAKC,GAAG,UAAR,WACE,SAAC,KAAD,CAASC,GAAIL,EAAb,sBACA,UAACG,EAAA,EAAD,CAAKG,QAAQ,OAAOC,eAAe,gBAAnC,WACE,SAACJ,EAAA,EAAD,CAAKK,MAAM,QAAX,UACE,gBAAKC,KAAKC,EAAAA,EAAAA,IAAOf,GAAcgB,IAAKnB,OAGtC,UAACW,EAAA,EAAD,CAAKK,MAAM,QAAX,WACE,0BACGhB,EADH,KACYI,EADZ,QAGA,SAACO,EAAA,EAAD,CAAKC,GAAG,IAAIE,QAAQ,OAApB,SACGZ,EAAOkB,KAAI,SAAAC,GAAK,OACf,0BAAsBA,EAAMC,MAAjBD,EAAME,GADF,OAInB,uBAAIhB,KACJ,wCAAgBiB,KAAKC,MAAOnB,EAAe,GAAM,KAAjD,QACA,wBAAKL,KACL,sCACA,uBAAII,KACJ,4BACE,SAAC,KAAD,CAASQ,GAAG,OAAZ,mBACA,SAAC,KAAD,CAASA,GAAG,UAAZ,kCAKR,SAAC,EAAAa,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,sNCvEKC,EAAS,mCAEfC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAS,mCAAG,WAAOC,EAAKC,GAAZ,uEACnBC,EAAS,KADU,KAGfF,EAHe,OAIhB,QAJgB,MAKhB,SALgB,OAWhB,YAXgB,MAYhB,cAZgB,MAahB,aAbgB,wCAMJF,EAAAA,EAAAA,IAAM,CACnBK,IAAI,mBAAD,OAAqBH,EAArB,oBAAoCH,EAApC,iBAAmDI,KAPrC,8BAoBnBC,EApBmB,qDAcJJ,EAAAA,EAAAA,IAAM,CACnBK,IAAI,UAAD,OAAYH,EAAZ,oBAA2BH,EAA3B,iBAA0CI,KAf5B,0BAoBJH,EAAAA,EAAAA,IAAM,CACnBK,IAAI,yBAAD,OAA2BN,EAA3B,kBAA2CG,EAA3C,iBAAuDC,KArBzC,iCA0BhBC,EAAOE,MA1BS,4CAAH,wDA6BTxC,EAAY,mCAAG,WAAMR,GAAN,wFACN0C,EAAAA,EAAAA,IAAM,CACxBK,IAAI,UAAD,OAAY/C,EAAZ,oBAA+ByC,KAFV,cACpBtC,EADoB,yBAKnBA,EAAM6C,MALa,2CAAH,sDAQZC,EAAO,mCAAG,WAAMjD,GAAN,wFACE0C,EAAAA,EAAAA,IAAM,CAC3BK,IAAI,UAAD,OAAY/C,EAAZ,4BAAuCyC,KAFvB,cACfS,EADe,yBAKdA,EAASF,KAAKG,MALA,2CAAH,sDAQPC,EAAU,mCAAG,WAAOpD,GAAP,4FAAgB6C,EAAhB,+BAAuB,EAAvB,UACFH,EAAAA,EAAAA,IAAM,CAC1BK,IAAI,UAAD,OAAY/C,EAAZ,4BAAuCyC,EAAvC,iBAAsDI,KAFnC,cAClBQ,EADkB,yBAKjBA,EAAQL,MALS,2CAAH,sDAQVM,EAAS,mCAAG,qGACFZ,EAAAA,EAAAA,IAAM,CACzBK,IAAI,6BAAD,OAA+BN,KAFb,cACjB1B,EADiB,yBAKhBA,EAAOiC,MALS,2CAAH,qDAQTjB,EAAS,SAAAwB,GAAO,mDACWA,EADX,C","sources":["components/Box/Box.js","pages/MovieDetails/MovieDetails.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nconst Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  background,\n  border,\n  position\n);\n\nexport default Box;\n","import { useState, useEffect, Suspense } from 'react';\nimport { NavLink, Outlet, useParams, useLocation } from 'react-router-dom';\n\nimport Box from 'components/Box';\n\nimport { getMovieById, getImg } from 'services/moviesApi';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    try {\n      getMovieById(movieId).then(setMovie);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const {\n    title,\n    tagline,\n    genres,\n    poster_path,\n    release_date,\n    overview,\n    vote_average,\n    runtime,\n  } = movie;\n\n  console.log(movie);\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <>\n      <Box as=\"section\">\n        <NavLink to={backLinkHref}>Go back</NavLink>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Box width=\"320px\">\n            <img src={getImg(poster_path)} alt={title} />\n          </Box>\n\n          <Box width=\"900px\">\n            <h2>\n              {title} ({release_date})\n            </h2>\n            <Box as=\"p\" display=\"flex\">\n              {genres.map(genre => (\n                <span key={genre.id}>{genre.name}</span>\n              ))}\n            </Box>\n            <p>{runtime}</p>\n            <p>User score: {Math.round((vote_average / 10) * 100)}%</p>\n            <h3>{tagline}</h3>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n            <div>\n              <NavLink to=\"cast\">Cast</NavLink>\n              <NavLink to=\"reviews\">Reviews</NavLink>\n            </div>\n          </Box>\n        </Box>\n      </Box>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst apiKey = 'f6621a4453f011cfb432a7f58c4cc70b';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getMovies = async (ref, page) => {\n  let movies = null;\n\n  switch (ref) {\n    case 'day':\n    case 'week':\n      movies = await axios({\n        url: `/trending/movie/${ref}?api_key=${apiKey}&page=${page}`,\n      });\n      break;\n\n    case 'popular':\n    case 'top_rated':\n    case 'upcoming':\n      movies = await axios({\n        url: `/movie/${ref}?api_key=${apiKey}&page=${page}`,\n      });\n      break;\n\n    default:\n      movies = await axios({\n        url: `/search/movie?api_key=${apiKey}&query=${ref}&page=${page}`,\n      });\n      break;\n  }\n\n  return movies.data;\n};\n\nexport const getMovieById = async movieId => {\n  const movie = await axios({\n    url: `/movie/${movieId}?api_key=${apiKey}`,\n  });\n\n  return movie.data;\n};\n\nexport const getCast = async movieId => {\n  const castData = await axios({\n    url: `/movie/${movieId}/credits?api_key=${apiKey}`,\n  });\n\n  return castData.data.cast;\n};\n\nexport const getReviews = async (movieId, page = 1) => {\n  const reviews = await axios({\n    url: `/movie/${movieId}/reviews?api_key=${apiKey}&page=${page}`,\n  });\n\n  return reviews.data;\n};\n\nexport const getGenres = async () => {\n  const genres = await axios({\n    url: `/genre/movie/list?api_key=${apiKey}`,\n  });\n\n  return genres.data;\n};\n\nexport const getImg = imgPath =>\n  `https://image.tmdb.org/t/p/original${imgPath}`;\n"],"names":["styled","color","space","layout","flexbox","background","border","position","movieId","useParams","useState","movie","setMovie","location","useLocation","useEffect","getMovieById","then","error","console","log","title","tagline","genres","poster_path","release_date","overview","vote_average","runtime","backLinkHref","state","from","Box","as","to","display","justifyContent","width","src","getImg","alt","map","genre","name","id","Math","round","Suspense","fallback","apiKey","axios","getMovies","ref","page","movies","url","data","getCast","castData","cast","getReviews","reviews","getGenres","imgPath"],"sourceRoot":""}